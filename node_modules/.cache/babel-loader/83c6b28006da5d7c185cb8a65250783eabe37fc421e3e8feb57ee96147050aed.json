{"ast":null,"code":"var _jsxFileName = \"/home/bsquiat/Development/code/Phase2/music-app-project/src/components/MusicPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MusicPlayer() {\n  _s();\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  useEffect(() => {\n    // Fetch the data from the Audiomack API\n    fetch('https://www.audiomack.com/data-api/v1/playlists/1').then(response => response.json()).then(data => {\n      // Set the current track to the first track in the playlist\n      setCurrentTrack(data.tracks[0]);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n  const handleNextTrack = () => {\n    // Find the index of the current track\n    const currentIndex = currentTrack.playlist_index - 1;\n    // Set the current track to the next track in the playlist\n    setCurrentTrack(currentTrack.playlist.tracks[currentIndex + 1]);\n    setIsPlaying(true);\n  };\n  const handlePrevTrack = () => {\n    // Find the index of the current track\n    const currentIndex = currentTrack.playlist_index - 1;\n    // Set the current track to the previous track in the playlist\n    setCurrentTrack(currentTrack.playlist.tracks[currentIndex - 1]);\n    setIsPlaying(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: currentTrack.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: currentTrack.url,\n      controls: true,\n      autoPlay: isPlaying,\n      onTimeUpdate: e => setCurrentTime(e.target.currentTime)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevTrack,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePlayPause,\n        children: isPlaying ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextTrack,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current time: \", currentTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(MusicPlayer, \"v1tzMHLd6Tw3KrJNaRk0Mast1qw=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MusicPlayer","_s","currentTrack","setCurrentTrack","currentTime","setCurrentTime","isPlaying","setIsPlaying","fetch","then","response","json","data","tracks","catch","error","console","handlePlayPause","handleNextTrack","currentIndex","playlist_index","playlist","handlePrevTrack","children","title","fileName","_jsxFileName","lineNumber","columnNumber","src","url","controls","autoPlay","onTimeUpdate","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/bsquiat/Development/code/Phase2/music-app-project/src/components/MusicPlayer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction MusicPlayer() {\n  const [currentTrack, setCurrentTrack] = useState({});\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    // Fetch the data from the Audiomack API\n    fetch('https://www.audiomack.com/data-api/v1/playlists/1')\n      .then(response => response.json())\n      .then(data => {\n        // Set the current track to the first track in the playlist\n        setCurrentTrack(data.tracks[0]);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, []);\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  }\n\n  const handleNextTrack = () => {\n    // Find the index of the current track\n    const currentIndex = currentTrack.playlist_index - 1;\n    // Set the current track to the next track in the playlist\n    setCurrentTrack(currentTrack.playlist.tracks[currentIndex + 1]);\n    setIsPlaying(true);\n  }\n\n  const handlePrevTrack = () => {\n    // Find the index of the current track\n    const currentIndex = currentTrack.playlist_index - 1;\n    // Set the current track to the previous track in the playlist\n    setCurrentTrack(currentTrack.playlist.tracks[currentIndex - 1]);\n    setIsPlaying(true);\n  }\n\n  return (\n    <div>\n      <h1>{currentTrack.title}</h1>\n      <audio src={currentTrack.url} controls autoPlay={isPlaying} onTimeUpdate={e => setCurrentTime(e.target.currentTime)} />\n      <div>\n        <button onClick={handlePrevTrack}>Previous</button>\n        <button onClick={handlePlayPause}>{isPlaying ? 'Pause' : 'Play'}</button>\n        <button onClick={handleNextTrack}>Next</button>\n      </div>\n      <p>Current time: {currentTime}</p>\n    </div>\n  );\n}\n\nexport default MusicPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}