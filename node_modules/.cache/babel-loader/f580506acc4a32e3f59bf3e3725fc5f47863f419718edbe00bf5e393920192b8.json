{"ast":null,"code":"var url = require('url'),\n  passes = exports;\nvar redirectRegex = /^30(1|2|7|8)$/;\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, res, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\n[\n// <--\n\n/**\n * If is a HTTP 1.0 request, remove chunk headers\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction removeChunked(req, res, proxyRes) {\n  if (req.httpVersion === '1.0') {\n    delete proxyRes.headers['transfer-encoding'];\n  }\n},\n/**\n * If is a HTTP 1.0 request, set the correct connection header\n * or if connection header not present, then use `keep-alive`\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction setConnection(req, res, proxyRes) {\n  if (req.httpVersion === '1.0') {\n    proxyRes.headers.connection = req.headers.connection || 'close';\n  } else if (!proxyRes.headers.connection) {\n    proxyRes.headers.connection = req.headers.connection || 'keep-alive';\n  }\n}, function setRedirectHostRewrite(req, res, proxyRes, options) {\n  if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite) && proxyRes.headers['location'] && redirectRegex.test(proxyRes.statusCode)) {\n    var target = url.parse(options.target);\n    var u = url.parse(proxyRes.headers['location']);\n\n    // make sure the redirected host matches the target host before rewriting\n    if (target.host != u.host) {\n      return;\n    }\n    if (options.hostRewrite) {\n      u.host = options.hostRewrite;\n    } else if (options.autoRewrite) {\n      u.host = req.headers['host'];\n    }\n    if (options.protocolRewrite) {\n      u.protocol = options.protocolRewrite;\n    }\n    proxyRes.headers['location'] = u.format();\n  }\n},\n/**\n * Copy headers from proxyResponse to response\n * set each header in response object.\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction writeHeaders(req, res, proxyRes) {\n  Object.keys(proxyRes.headers).forEach(function (key) {\n    res.setHeader(key, proxyRes.headers[key]);\n  });\n},\n/**\n * Set the statusCode from the proxyResponse\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction writeStatusCode(req, res, proxyRes) {\n  res.writeHead(proxyRes.statusCode);\n}] // <--\n.forEach(function (func) {\n  passes[func.name] = func;\n});","map":{"version":3,"names":["url","require","passes","exports","redirectRegex","removeChunked","req","res","proxyRes","httpVersion","headers","setConnection","connection","setRedirectHostRewrite","options","hostRewrite","autoRewrite","protocolRewrite","test","statusCode","target","parse","u","host","protocol","format","writeHeaders","Object","keys","forEach","key","setHeader","writeStatusCode","writeHead","func","name"],"sources":["/home/bsquiat/Development/code/Phase2/music-app-project/node_modules/cors-anywhere/node_modules/http-proxy/lib/http-proxy/passes/web-outgoing.js"],"sourcesContent":["var url    = require('url'),\n    passes = exports;\n\nvar redirectRegex = /^30(1|2|7|8)$/;\n\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, res, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\n[ // <--\n\n  /**\n   * If is a HTTP 1.0 request, remove chunk headers\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function removeChunked(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      delete proxyRes.headers['transfer-encoding'];\n    }\n  },\n\n  /**\n   * If is a HTTP 1.0 request, set the correct connection header\n   * or if connection header not present, then use `keep-alive`\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function setConnection(req, res, proxyRes) {\n    if (req.httpVersion === '1.0') {\n      proxyRes.headers.connection = req.headers.connection || 'close';\n    } else if (!proxyRes.headers.connection) {\n      proxyRes.headers.connection = req.headers.connection || 'keep-alive';\n    }\n  },\n\n  function setRedirectHostRewrite(req, res, proxyRes, options) {\n    if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite)\n        && proxyRes.headers['location']\n        && redirectRegex.test(proxyRes.statusCode)) {\n      var target = url.parse(options.target);\n      var u = url.parse(proxyRes.headers['location']);\n\n      // make sure the redirected host matches the target host before rewriting\n      if (target.host != u.host) {\n        return;\n      }\n\n      if (options.hostRewrite) {\n        u.host = options.hostRewrite;\n      } else if (options.autoRewrite) {\n        u.host = req.headers['host'];\n      }\n      if (options.protocolRewrite) {\n        u.protocol = options.protocolRewrite;\n      }\n\n      proxyRes.headers['location'] = u.format();\n    }\n  },\n  /**\n   * Copy headers from proxyResponse to response\n   * set each header in response object.\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function writeHeaders(req, res, proxyRes) {\n    Object.keys(proxyRes.headers).forEach(function(key) {\n      res.setHeader(key, proxyRes.headers[key]);\n    });\n  },\n\n  /**\n   * Set the statusCode from the proxyResponse\n   *\n   * @param {ClientRequest} Req Request object\n   * @param {IncomingMessage} Res Response object\n   * @param {proxyResponse} Res Response object from the proxy request\n   *\n   * @api private\n   */\n  function writeStatusCode(req, res, proxyRes) {\n    res.writeHead(proxyRes.statusCode);\n  }\n\n] // <--\n  .forEach(function(func) {\n    passes[func.name] = func;\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}