{"ast":null,"code":"// Â© 2013 - 2016 Rob Wu <rob@robwu.nl>\n// Released under the MIT license\n\n'use strict';\n\nvar httpProxy = require('http-proxy');\nvar net = require('net');\nvar url = require('url');\nvar regexp_tld = require('./regexp-top-level-domain');\nvar getProxyForUrl = require('proxy-from-env').getProxyForUrl;\nvar help_text = {};\nfunction showUsage(help_file, headers, response) {\n  var isHtml = /\\.html$/.test(help_file);\n  headers['content-type'] = isHtml ? 'text/html' : 'text/plain';\n  if (help_text[help_file] != null) {\n    response.writeHead(200, headers);\n    response.end(help_text[help_file]);\n  } else {\n    require('fs').readFile(help_file, 'utf8', function (err, data) {\n      if (err) {\n        console.error(err);\n        response.writeHead(500, headers);\n        response.end();\n      } else {\n        help_text[help_file] = data;\n        showUsage(help_file, headers, response); // Recursive call, but since data is a string, the recursion will end\n      }\n    });\n  }\n}\n\n/**\n * Check whether the specified hostname is valid.\n *\n * @param hostname {string} Host name (excluding port) of requested resource.\n * @return {boolean} Whether the requested resource can be accessed.\n */\nfunction isValidHostName(hostname) {\n  return !!(regexp_tld.test(hostname) || net.isIPv4(hostname) || net.isIPv6(hostname));\n}\n\n/**\n * Adds CORS headers to the response headers.\n *\n * @param headers {object} Response headers\n * @param request {ServerRequest}\n */\nfunction withCORS(headers, request) {\n  headers['access-control-allow-origin'] = '*';\n  var corsMaxAge = request.corsAnywhereRequestState.corsMaxAge;\n  if (request.method === 'OPTIONS' && corsMaxAge) {\n    headers['access-control-max-age'] = corsMaxAge;\n  }\n  if (request.headers['access-control-request-method']) {\n    headers['access-control-allow-methods'] = request.headers['access-control-request-method'];\n    delete request.headers['access-control-request-method'];\n  }\n  if (request.headers['access-control-request-headers']) {\n    headers['access-control-allow-headers'] = request.headers['access-control-request-headers'];\n    delete request.headers['access-control-request-headers'];\n  }\n  headers['access-control-expose-headers'] = Object.keys(headers).join(',');\n  return headers;\n}\n\n/**\n * Performs the actual proxy request.\n *\n * @param req {ServerRequest} Incoming http request\n * @param res {ServerResponse} Outgoing (proxied) http request\n * @param proxy {HttpProxy}\n */\nfunction proxyRequest(req, res, proxy) {\n  var location = req.corsAnywhereRequestState.location;\n  req.url = location.path;\n  var proxyOptions = {\n    changeOrigin: false,\n    prependPath: false,\n    target: location,\n    headers: {\n      host: location.host\n    },\n    // HACK: Get hold of the proxyReq object, because we need it later.\n    // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L144\n    buffer: {\n      pipe: function (proxyReq) {\n        var proxyReqOn = proxyReq.on;\n        // Intercepts the handler that connects proxyRes to res.\n        // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L146-L158\n        proxyReq.on = function (eventName, listener) {\n          if (eventName !== 'response') {\n            return proxyReqOn.call(this, eventName, listener);\n          }\n          return proxyReqOn.call(this, 'response', function (proxyRes) {\n            if (onProxyResponse(proxy, proxyReq, proxyRes, req, res)) {\n              try {\n                listener(proxyRes);\n              } catch (err) {\n                // Wrap in try-catch because an error could occur:\n                // \"RangeError: Invalid status code: 0\"\n                // https://github.com/Rob--W/cors-anywhere/issues/95\n                // https://github.com/nodejitsu/node-http-proxy/issues/1080\n\n                // Forward error (will ultimately emit the 'error' event on our proxy object):\n                // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n                proxyReq.emit('error', err);\n              }\n            }\n          });\n        };\n        return req.pipe(proxyReq);\n      }\n    }\n  };\n  var proxyThroughUrl = req.corsAnywhereRequestState.getProxyForUrl(location.href);\n  if (proxyThroughUrl) {\n    proxyOptions.target = proxyThroughUrl;\n    proxyOptions.toProxy = true;\n    // If a proxy URL was set, req.url must be an absolute URL. Then the request will not be sent\n    // directly to the proxied URL, but through another proxy.\n    req.url = location.href;\n  }\n\n  // Start proxying the request\n  try {\n    proxy.web(req, res, proxyOptions);\n  } catch (err) {\n    proxy.emit('error', err, req, res);\n  }\n}\n\n/**\n * This method modifies the response headers of the proxied response.\n * If a redirect is detected, the response is not sent to the client,\n * and a new request is initiated.\n *\n * client (req) -> CORS Anywhere -> (proxyReq) -> other server\n * client (res) <- CORS Anywhere <- (proxyRes) <- other server\n *\n * @param proxy {HttpProxy}\n * @param proxyReq {ClientRequest} The outgoing request to the other server.\n * @param proxyRes {ServerResponse} The response from the other server.\n * @param req {IncomingMessage} Incoming HTTP request, augmented with property corsAnywhereRequestState\n * @param req.corsAnywhereRequestState {object}\n * @param req.corsAnywhereRequestState.location {object} See parseURL\n * @param req.corsAnywhereRequestState.getProxyForUrl {function} See proxyRequest\n * @param req.corsAnywhereRequestState.proxyBaseUrl {string} Base URL of the CORS API endpoint\n * @param req.corsAnywhereRequestState.maxRedirects {number} Maximum number of redirects\n * @param req.corsAnywhereRequestState.redirectCount_ {number} Internally used to count redirects\n * @param res {ServerResponse} Outgoing response to the client that wanted to proxy the HTTP request.\n *\n * @returns {boolean} true if http-proxy should continue to pipe proxyRes to res.\n */\nfunction onProxyResponse(proxy, proxyReq, proxyRes, req, res) {\n  var requestState = req.corsAnywhereRequestState;\n  var statusCode = proxyRes.statusCode;\n  if (!requestState.redirectCount_) {\n    res.setHeader('x-request-url', requestState.location.href);\n  }\n  // Handle redirects\n  if (statusCode === 301 || statusCode === 302 || statusCode === 303 || statusCode === 307 || statusCode === 308) {\n    var locationHeader = proxyRes.headers.location;\n    var parsedLocation;\n    if (locationHeader) {\n      locationHeader = url.resolve(requestState.location.href, locationHeader);\n      parsedLocation = parseURL(locationHeader);\n    }\n    if (parsedLocation) {\n      if (statusCode === 301 || statusCode === 302 || statusCode === 303) {\n        // Exclude 307 & 308, because they are rare, and require preserving the method + request body\n        requestState.redirectCount_ = requestState.redirectCount_ + 1 || 1;\n        if (requestState.redirectCount_ <= requestState.maxRedirects) {\n          // Handle redirects within the server, because some clients (e.g. Android Stock Browser)\n          // cancel redirects.\n          // Set header for debugging purposes. Do not try to parse it!\n          res.setHeader('X-CORS-Redirect-' + requestState.redirectCount_, statusCode + ' ' + locationHeader);\n          req.method = 'GET';\n          req.headers['content-length'] = '0';\n          delete req.headers['content-type'];\n          requestState.location = parsedLocation;\n\n          // Remove all listeners (=reset events to initial state)\n          req.removeAllListeners();\n\n          // Remove the error listener so that the ECONNRESET \"error\" that\n          // may occur after aborting a request does not propagate to res.\n          // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n          proxyReq.removeAllListeners('error');\n          proxyReq.once('error', function catchAndIgnoreError() {});\n          proxyReq.abort();\n\n          // Initiate a new proxy request.\n          proxyRequest(req, res, proxy);\n          return false;\n        }\n      }\n      proxyRes.headers.location = requestState.proxyBaseUrl + '/' + locationHeader;\n    }\n  }\n\n  // Strip cookies\n  delete proxyRes.headers['set-cookie'];\n  delete proxyRes.headers['set-cookie2'];\n  proxyRes.headers['x-final-url'] = requestState.location.href;\n  withCORS(proxyRes.headers, req);\n  return true;\n}\n\n/**\n * @param req_url {string} The requested URL (scheme is optional).\n * @return {object} URL parsed using url.parse\n */\nfunction parseURL(req_url) {\n  var match = req_url.match(/^(?:(https?:)?\\/\\/)?(([^\\/?]+?)(?::(\\d{0,5})(?=[\\/?]|$))?)([\\/?][\\S\\s]*|$)/i);\n  //                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^\n  //                            1:protocol       3:hostname     4:port                 5:path + query string\n  //                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //                                            2:host\n  if (!match) {\n    return null;\n  }\n  if (!match[1]) {\n    if (/^https?:/i.test(req_url)) {\n      // The pattern at top could mistakenly parse \"http:///\" as host=\"http:\" and path=///.\n      return null;\n    }\n    // Scheme is omitted.\n    if (req_url.lastIndexOf('//', 0) === -1) {\n      // \"//\" is omitted.\n      req_url = '//' + req_url;\n    }\n    req_url = (match[4] === '443' ? 'https:' : 'http:') + req_url;\n  }\n  var parsed = url.parse(req_url);\n  if (!parsed.hostname) {\n    // \"http://:1/\" and \"http:/notenoughslashes\" could end up here.\n    return null;\n  }\n  return parsed;\n}\n\n// Request handler factory\nfunction getHandler(options, proxy) {\n  var corsAnywhere = {\n    handleInitialRequest: null,\n    // Function that may handle the request instead, by returning a truthy value.\n    getProxyForUrl: getProxyForUrl,\n    // Function that specifies the proxy to use\n    maxRedirects: 5,\n    // Maximum number of redirects to be followed.\n    originBlacklist: [],\n    // Requests from these origins will be blocked.\n    originWhitelist: [],\n    // If non-empty, requests not from an origin in this list will be blocked.\n    checkRateLimit: null,\n    // Function that may enforce a rate-limit by returning a non-empty string.\n    redirectSameOrigin: false,\n    // Redirect the client to the requested URL for same-origin requests.\n    requireHeader: null,\n    // Require a header to be set?\n    removeHeaders: [],\n    // Strip these request headers.\n    setHeaders: {},\n    // Set these request headers.\n    corsMaxAge: 0,\n    // If set, an Access-Control-Max-Age header with this value (in seconds) will be added.\n    helpFile: __dirname + '/help.txt'\n  };\n  Object.keys(corsAnywhere).forEach(function (option) {\n    if (Object.prototype.hasOwnProperty.call(options, option)) {\n      corsAnywhere[option] = options[option];\n    }\n  });\n\n  // Convert corsAnywhere.requireHeader to an array of lowercase header names, or null.\n  if (corsAnywhere.requireHeader) {\n    if (typeof corsAnywhere.requireHeader === 'string') {\n      corsAnywhere.requireHeader = [corsAnywhere.requireHeader.toLowerCase()];\n    } else if (!Array.isArray(corsAnywhere.requireHeader) || corsAnywhere.requireHeader.length === 0) {\n      corsAnywhere.requireHeader = null;\n    } else {\n      corsAnywhere.requireHeader = corsAnywhere.requireHeader.map(function (headerName) {\n        return headerName.toLowerCase();\n      });\n    }\n  }\n  var hasRequiredHeaders = function (headers) {\n    return !corsAnywhere.requireHeader || corsAnywhere.requireHeader.some(function (headerName) {\n      return Object.hasOwnProperty.call(headers, headerName);\n    });\n  };\n  return function (req, res) {\n    req.corsAnywhereRequestState = {\n      getProxyForUrl: corsAnywhere.getProxyForUrl,\n      maxRedirects: corsAnywhere.maxRedirects,\n      corsMaxAge: corsAnywhere.corsMaxAge\n    };\n    var cors_headers = withCORS({}, req);\n    if (req.method === 'OPTIONS') {\n      // Pre-flight request. Reply successfully:\n      res.writeHead(200, cors_headers);\n      res.end();\n      return;\n    }\n    var location = parseURL(req.url.slice(1));\n    if (corsAnywhere.handleInitialRequest && corsAnywhere.handleInitialRequest(req, res, location)) {\n      return;\n    }\n    if (!location) {\n      // Invalid API call. Show how to correctly use the API\n      showUsage(corsAnywhere.helpFile, cors_headers, res);\n      return;\n    }\n    if (location.host === 'iscorsneeded') {\n      // Is CORS needed? This path is provided so that API consumers can test whether it's necessary\n      // to use CORS. The server's reply is always No, because if they can read it, then CORS headers\n      // are not necessary.\n      res.writeHead(200, {\n        'Content-Type': 'text/plain'\n      });\n      res.end('no');\n      return;\n    }\n    if (location.port > 65535) {\n      // Port is higher than 65535\n      res.writeHead(400, 'Invalid port', cors_headers);\n      res.end('Port number too large: ' + location.port);\n      return;\n    }\n    if (!/^\\/https?:/.test(req.url) && !isValidHostName(location.hostname)) {\n      // Don't even try to proxy invalid hosts (such as /favicon.ico, /robots.txt)\n      res.writeHead(404, 'Invalid host', cors_headers);\n      res.end('Invalid host: ' + location.hostname);\n      return;\n    }\n    if (!hasRequiredHeaders(req.headers)) {\n      res.writeHead(400, 'Header required', cors_headers);\n      res.end('Missing required request header. Must specify one of: ' + corsAnywhere.requireHeader);\n      return;\n    }\n    var origin = req.headers.origin || '';\n    if (corsAnywhere.originBlacklist.indexOf(origin) >= 0) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was blacklisted by the operator of this proxy.');\n      return;\n    }\n    if (corsAnywhere.originWhitelist.length && corsAnywhere.originWhitelist.indexOf(origin) === -1) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was not whitelisted by the operator of this proxy.');\n      return;\n    }\n    var rateLimitMessage = corsAnywhere.checkRateLimit && corsAnywhere.checkRateLimit(origin);\n    if (rateLimitMessage) {\n      res.writeHead(429, 'Too Many Requests', cors_headers);\n      res.end('The origin \"' + origin + '\" has sent too many requests.\\n' + rateLimitMessage);\n      return;\n    }\n    if (corsAnywhere.redirectSameOrigin && origin && location.href[origin.length] === '/' && location.href.lastIndexOf(origin, 0) === 0) {\n      // Send a permanent redirect to offload the server. Badly coded clients should not waste our resources.\n      cors_headers.vary = 'origin';\n      cors_headers['cache-control'] = 'private';\n      cors_headers.location = location.href;\n      res.writeHead(301, 'Please use a direct request', cors_headers);\n      res.end();\n      return;\n    }\n    var isRequestedOverHttps = req.connection.encrypted || /^\\s*https/.test(req.headers['x-forwarded-proto']);\n    var proxyBaseUrl = (isRequestedOverHttps ? 'https://' : 'http://') + req.headers.host;\n    corsAnywhere.removeHeaders.forEach(function (header) {\n      delete req.headers[header];\n    });\n    Object.keys(corsAnywhere.setHeaders).forEach(function (header) {\n      req.headers[header] = corsAnywhere.setHeaders[header];\n    });\n    req.corsAnywhereRequestState.location = location;\n    req.corsAnywhereRequestState.proxyBaseUrl = proxyBaseUrl;\n    proxyRequest(req, res, proxy);\n  };\n}\n\n// Create server with default and given values\n// Creator still needs to call .listen()\nexports.createServer = function createServer(options) {\n  options = options || {};\n\n  // Default options:\n  var httpProxyOptions = {\n    xfwd: true // Append X-Forwarded-* headers\n  };\n  // Allow user to override defaults and add own options\n  if (options.httpProxyOptions) {\n    Object.keys(options.httpProxyOptions).forEach(function (option) {\n      httpProxyOptions[option] = options.httpProxyOptions[option];\n    });\n  }\n  var proxy = httpProxy.createServer(httpProxyOptions);\n  var requestHandler = getHandler(options, proxy);\n  var server;\n  if (options.httpsOptions) {\n    server = require('https').createServer(options.httpsOptions, requestHandler);\n  } else {\n    server = require('http').createServer(requestHandler);\n  }\n\n  // When the server fails, just show a 404 instead of Internal server error\n  proxy.on('error', function (err, req, res) {\n    if (res.headersSent) {\n      // This could happen when a protocol error occurs when an error occurs\n      // after the headers have been received (and forwarded). Do not write\n      // the headers because it would generate an error.\n      // Prior to Node 13.x, the stream would have ended.\n      // As of Node 13.x, we must explicitly close it.\n      if (res.writableEnded === false) {\n        res.end();\n      }\n      return;\n    }\n\n    // When the error occurs after setting headers but before writing the response,\n    // then any previously set headers must be removed.\n    var headerNames = res.getHeaderNames ? res.getHeaderNames() : Object.keys(res._headers || {});\n    headerNames.forEach(function (name) {\n      res.removeHeader(name);\n    });\n    res.writeHead(404, {\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end('Not found because of proxy error: ' + err);\n  });\n  return server;\n};","map":{"version":3,"names":["httpProxy","require","net","url","regexp_tld","getProxyForUrl","help_text","showUsage","help_file","headers","response","isHtml","test","writeHead","end","readFile","err","data","console","error","isValidHostName","hostname","isIPv4","isIPv6","withCORS","request","corsMaxAge","corsAnywhereRequestState","method","Object","keys","join","proxyRequest","req","res","proxy","location","path","proxyOptions","changeOrigin","prependPath","target","host","buffer","pipe","proxyReq","proxyReqOn","on","eventName","listener","call","proxyRes","onProxyResponse","emit","proxyThroughUrl","href","toProxy","web","requestState","statusCode","redirectCount_","setHeader","locationHeader","parsedLocation","resolve","parseURL","maxRedirects","removeAllListeners","once","catchAndIgnoreError","abort","proxyBaseUrl","req_url","match","lastIndexOf","parsed","parse","getHandler","options","corsAnywhere","handleInitialRequest","originBlacklist","originWhitelist","checkRateLimit","redirectSameOrigin","requireHeader","removeHeaders","setHeaders","helpFile","__dirname","forEach","option","prototype","hasOwnProperty","toLowerCase","Array","isArray","length","map","headerName","hasRequiredHeaders","some","cors_headers","slice","port","origin","indexOf","rateLimitMessage","vary","isRequestedOverHttps","connection","encrypted","header","exports","createServer","httpProxyOptions","xfwd","requestHandler","server","httpsOptions","headersSent","writableEnded","headerNames","getHeaderNames","_headers","name","removeHeader"],"sources":["/home/bsquiat/Development/code/Phase2/music-app-project/node_modules/cors-anywhere/lib/cors-anywhere.js"],"sourcesContent":["// Â© 2013 - 2016 Rob Wu <rob@robwu.nl>\n// Released under the MIT license\n\n'use strict';\n\nvar httpProxy = require('http-proxy');\nvar net = require('net');\nvar url = require('url');\nvar regexp_tld = require('./regexp-top-level-domain');\nvar getProxyForUrl = require('proxy-from-env').getProxyForUrl;\n\nvar help_text = {};\nfunction showUsage(help_file, headers, response) {\n  var isHtml = /\\.html$/.test(help_file);\n  headers['content-type'] = isHtml ? 'text/html' : 'text/plain';\n  if (help_text[help_file] != null) {\n    response.writeHead(200, headers);\n    response.end(help_text[help_file]);\n  } else {\n    require('fs').readFile(help_file, 'utf8', function(err, data) {\n      if (err) {\n        console.error(err);\n        response.writeHead(500, headers);\n        response.end();\n      } else {\n        help_text[help_file] = data;\n        showUsage(help_file, headers, response); // Recursive call, but since data is a string, the recursion will end\n      }\n    });\n  }\n}\n\n/**\n * Check whether the specified hostname is valid.\n *\n * @param hostname {string} Host name (excluding port) of requested resource.\n * @return {boolean} Whether the requested resource can be accessed.\n */\nfunction isValidHostName(hostname) {\n  return !!(\n    regexp_tld.test(hostname) ||\n    net.isIPv4(hostname) ||\n    net.isIPv6(hostname)\n  );\n}\n\n/**\n * Adds CORS headers to the response headers.\n *\n * @param headers {object} Response headers\n * @param request {ServerRequest}\n */\nfunction withCORS(headers, request) {\n  headers['access-control-allow-origin'] = '*';\n  var corsMaxAge = request.corsAnywhereRequestState.corsMaxAge;\n  if (request.method === 'OPTIONS' && corsMaxAge) {\n    headers['access-control-max-age'] = corsMaxAge;\n  }\n  if (request.headers['access-control-request-method']) {\n    headers['access-control-allow-methods'] = request.headers['access-control-request-method'];\n    delete request.headers['access-control-request-method'];\n  }\n  if (request.headers['access-control-request-headers']) {\n    headers['access-control-allow-headers'] = request.headers['access-control-request-headers'];\n    delete request.headers['access-control-request-headers'];\n  }\n\n  headers['access-control-expose-headers'] = Object.keys(headers).join(',');\n\n  return headers;\n}\n\n/**\n * Performs the actual proxy request.\n *\n * @param req {ServerRequest} Incoming http request\n * @param res {ServerResponse} Outgoing (proxied) http request\n * @param proxy {HttpProxy}\n */\nfunction proxyRequest(req, res, proxy) {\n  var location = req.corsAnywhereRequestState.location;\n  req.url = location.path;\n\n  var proxyOptions = {\n    changeOrigin: false,\n    prependPath: false,\n    target: location,\n    headers: {\n      host: location.host,\n    },\n    // HACK: Get hold of the proxyReq object, because we need it later.\n    // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L144\n    buffer: {\n      pipe: function(proxyReq) {\n        var proxyReqOn = proxyReq.on;\n        // Intercepts the handler that connects proxyRes to res.\n        // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L146-L158\n        proxyReq.on = function(eventName, listener) {\n          if (eventName !== 'response') {\n            return proxyReqOn.call(this, eventName, listener);\n          }\n          return proxyReqOn.call(this, 'response', function(proxyRes) {\n            if (onProxyResponse(proxy, proxyReq, proxyRes, req, res)) {\n              try {\n                listener(proxyRes);\n              } catch (err) {\n                // Wrap in try-catch because an error could occur:\n                // \"RangeError: Invalid status code: 0\"\n                // https://github.com/Rob--W/cors-anywhere/issues/95\n                // https://github.com/nodejitsu/node-http-proxy/issues/1080\n\n                // Forward error (will ultimately emit the 'error' event on our proxy object):\n                // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n                proxyReq.emit('error', err);\n              }\n            }\n          });\n        };\n        return req.pipe(proxyReq);\n      },\n    },\n  };\n\n  var proxyThroughUrl = req.corsAnywhereRequestState.getProxyForUrl(location.href);\n  if (proxyThroughUrl) {\n    proxyOptions.target = proxyThroughUrl;\n    proxyOptions.toProxy = true;\n    // If a proxy URL was set, req.url must be an absolute URL. Then the request will not be sent\n    // directly to the proxied URL, but through another proxy.\n    req.url = location.href;\n  }\n\n  // Start proxying the request\n  try {\n    proxy.web(req, res, proxyOptions);\n  } catch (err) {\n    proxy.emit('error', err, req, res);\n  }\n}\n\n/**\n * This method modifies the response headers of the proxied response.\n * If a redirect is detected, the response is not sent to the client,\n * and a new request is initiated.\n *\n * client (req) -> CORS Anywhere -> (proxyReq) -> other server\n * client (res) <- CORS Anywhere <- (proxyRes) <- other server\n *\n * @param proxy {HttpProxy}\n * @param proxyReq {ClientRequest} The outgoing request to the other server.\n * @param proxyRes {ServerResponse} The response from the other server.\n * @param req {IncomingMessage} Incoming HTTP request, augmented with property corsAnywhereRequestState\n * @param req.corsAnywhereRequestState {object}\n * @param req.corsAnywhereRequestState.location {object} See parseURL\n * @param req.corsAnywhereRequestState.getProxyForUrl {function} See proxyRequest\n * @param req.corsAnywhereRequestState.proxyBaseUrl {string} Base URL of the CORS API endpoint\n * @param req.corsAnywhereRequestState.maxRedirects {number} Maximum number of redirects\n * @param req.corsAnywhereRequestState.redirectCount_ {number} Internally used to count redirects\n * @param res {ServerResponse} Outgoing response to the client that wanted to proxy the HTTP request.\n *\n * @returns {boolean} true if http-proxy should continue to pipe proxyRes to res.\n */\nfunction onProxyResponse(proxy, proxyReq, proxyRes, req, res) {\n  var requestState = req.corsAnywhereRequestState;\n\n  var statusCode = proxyRes.statusCode;\n\n  if (!requestState.redirectCount_) {\n    res.setHeader('x-request-url', requestState.location.href);\n  }\n  // Handle redirects\n  if (statusCode === 301 || statusCode === 302 || statusCode === 303 || statusCode === 307 || statusCode === 308) {\n    var locationHeader = proxyRes.headers.location;\n    var parsedLocation;\n    if (locationHeader) {\n      locationHeader = url.resolve(requestState.location.href, locationHeader);\n      parsedLocation = parseURL(locationHeader);\n    }\n    if (parsedLocation) {\n      if (statusCode === 301 || statusCode === 302 || statusCode === 303) {\n        // Exclude 307 & 308, because they are rare, and require preserving the method + request body\n        requestState.redirectCount_ = requestState.redirectCount_ + 1 || 1;\n        if (requestState.redirectCount_ <= requestState.maxRedirects) {\n          // Handle redirects within the server, because some clients (e.g. Android Stock Browser)\n          // cancel redirects.\n          // Set header for debugging purposes. Do not try to parse it!\n          res.setHeader('X-CORS-Redirect-' + requestState.redirectCount_, statusCode + ' ' + locationHeader);\n\n          req.method = 'GET';\n          req.headers['content-length'] = '0';\n          delete req.headers['content-type'];\n          requestState.location = parsedLocation;\n\n          // Remove all listeners (=reset events to initial state)\n          req.removeAllListeners();\n\n          // Remove the error listener so that the ECONNRESET \"error\" that\n          // may occur after aborting a request does not propagate to res.\n          // https://github.com/nodejitsu/node-http-proxy/blob/v1.11.1/lib/http-proxy/passes/web-incoming.js#L134\n          proxyReq.removeAllListeners('error');\n          proxyReq.once('error', function catchAndIgnoreError() {});\n          proxyReq.abort();\n\n          // Initiate a new proxy request.\n          proxyRequest(req, res, proxy);\n          return false;\n        }\n      }\n      proxyRes.headers.location = requestState.proxyBaseUrl + '/' + locationHeader;\n    }\n  }\n\n  // Strip cookies\n  delete proxyRes.headers['set-cookie'];\n  delete proxyRes.headers['set-cookie2'];\n\n  proxyRes.headers['x-final-url'] = requestState.location.href;\n  withCORS(proxyRes.headers, req);\n  return true;\n}\n\n\n/**\n * @param req_url {string} The requested URL (scheme is optional).\n * @return {object} URL parsed using url.parse\n */\nfunction parseURL(req_url) {\n  var match = req_url.match(/^(?:(https?:)?\\/\\/)?(([^\\/?]+?)(?::(\\d{0,5})(?=[\\/?]|$))?)([\\/?][\\S\\s]*|$)/i);\n  //                              ^^^^^^^          ^^^^^^^^      ^^^^^^^                ^^^^^^^^^^^^\n  //                            1:protocol       3:hostname     4:port                 5:path + query string\n  //                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //                                            2:host\n  if (!match) {\n    return null;\n  }\n  if (!match[1]) {\n    if (/^https?:/i.test(req_url)) {\n      // The pattern at top could mistakenly parse \"http:///\" as host=\"http:\" and path=///.\n      return null;\n    }\n    // Scheme is omitted.\n    if (req_url.lastIndexOf('//', 0) === -1) {\n      // \"//\" is omitted.\n      req_url = '//' + req_url;\n    }\n    req_url = (match[4] === '443' ? 'https:' : 'http:') + req_url;\n  }\n  var parsed = url.parse(req_url);\n  if (!parsed.hostname) {\n    // \"http://:1/\" and \"http:/notenoughslashes\" could end up here.\n    return null;\n  }\n  return parsed;\n}\n\n// Request handler factory\nfunction getHandler(options, proxy) {\n  var corsAnywhere = {\n    handleInitialRequest: null,     // Function that may handle the request instead, by returning a truthy value.\n    getProxyForUrl: getProxyForUrl, // Function that specifies the proxy to use\n    maxRedirects: 5,                // Maximum number of redirects to be followed.\n    originBlacklist: [],            // Requests from these origins will be blocked.\n    originWhitelist: [],            // If non-empty, requests not from an origin in this list will be blocked.\n    checkRateLimit: null,           // Function that may enforce a rate-limit by returning a non-empty string.\n    redirectSameOrigin: false,      // Redirect the client to the requested URL for same-origin requests.\n    requireHeader: null,            // Require a header to be set?\n    removeHeaders: [],              // Strip these request headers.\n    setHeaders: {},                 // Set these request headers.\n    corsMaxAge: 0,                  // If set, an Access-Control-Max-Age header with this value (in seconds) will be added.\n    helpFile: __dirname + '/help.txt',\n  };\n\n  Object.keys(corsAnywhere).forEach(function(option) {\n    if (Object.prototype.hasOwnProperty.call(options, option)) {\n      corsAnywhere[option] = options[option];\n    }\n  });\n\n  // Convert corsAnywhere.requireHeader to an array of lowercase header names, or null.\n  if (corsAnywhere.requireHeader) {\n    if (typeof corsAnywhere.requireHeader === 'string') {\n      corsAnywhere.requireHeader = [corsAnywhere.requireHeader.toLowerCase()];\n    } else if (!Array.isArray(corsAnywhere.requireHeader) || corsAnywhere.requireHeader.length === 0) {\n      corsAnywhere.requireHeader = null;\n    } else {\n      corsAnywhere.requireHeader = corsAnywhere.requireHeader.map(function(headerName) {\n        return headerName.toLowerCase();\n      });\n    }\n  }\n  var hasRequiredHeaders = function(headers) {\n    return !corsAnywhere.requireHeader || corsAnywhere.requireHeader.some(function(headerName) {\n      return Object.hasOwnProperty.call(headers, headerName);\n    });\n  };\n\n  return function(req, res) {\n    req.corsAnywhereRequestState = {\n      getProxyForUrl: corsAnywhere.getProxyForUrl,\n      maxRedirects: corsAnywhere.maxRedirects,\n      corsMaxAge: corsAnywhere.corsMaxAge,\n    };\n\n    var cors_headers = withCORS({}, req);\n    if (req.method === 'OPTIONS') {\n      // Pre-flight request. Reply successfully:\n      res.writeHead(200, cors_headers);\n      res.end();\n      return;\n    }\n\n    var location = parseURL(req.url.slice(1));\n\n    if (corsAnywhere.handleInitialRequest && corsAnywhere.handleInitialRequest(req, res, location)) {\n      return;\n    }\n\n    if (!location) {\n      // Invalid API call. Show how to correctly use the API\n      showUsage(corsAnywhere.helpFile, cors_headers, res);\n      return;\n    }\n\n    if (location.host === 'iscorsneeded') {\n      // Is CORS needed? This path is provided so that API consumers can test whether it's necessary\n      // to use CORS. The server's reply is always No, because if they can read it, then CORS headers\n      // are not necessary.\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('no');\n      return;\n    }\n\n    if (location.port > 65535) {\n      // Port is higher than 65535\n      res.writeHead(400, 'Invalid port', cors_headers);\n      res.end('Port number too large: ' + location.port);\n      return;\n    }\n\n    if (!/^\\/https?:/.test(req.url) && !isValidHostName(location.hostname)) {\n      // Don't even try to proxy invalid hosts (such as /favicon.ico, /robots.txt)\n      res.writeHead(404, 'Invalid host', cors_headers);\n      res.end('Invalid host: ' + location.hostname);\n      return;\n    }\n\n    if (!hasRequiredHeaders(req.headers)) {\n      res.writeHead(400, 'Header required', cors_headers);\n      res.end('Missing required request header. Must specify one of: ' + corsAnywhere.requireHeader);\n      return;\n    }\n\n    var origin = req.headers.origin || '';\n    if (corsAnywhere.originBlacklist.indexOf(origin) >= 0) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was blacklisted by the operator of this proxy.');\n      return;\n    }\n\n    if (corsAnywhere.originWhitelist.length && corsAnywhere.originWhitelist.indexOf(origin) === -1) {\n      res.writeHead(403, 'Forbidden', cors_headers);\n      res.end('The origin \"' + origin + '\" was not whitelisted by the operator of this proxy.');\n      return;\n    }\n\n    var rateLimitMessage = corsAnywhere.checkRateLimit && corsAnywhere.checkRateLimit(origin);\n    if (rateLimitMessage) {\n      res.writeHead(429, 'Too Many Requests', cors_headers);\n      res.end('The origin \"' + origin + '\" has sent too many requests.\\n' + rateLimitMessage);\n      return;\n    }\n\n    if (corsAnywhere.redirectSameOrigin && origin && location.href[origin.length] === '/' &&\n        location.href.lastIndexOf(origin, 0) === 0) {\n      // Send a permanent redirect to offload the server. Badly coded clients should not waste our resources.\n      cors_headers.vary = 'origin';\n      cors_headers['cache-control'] = 'private';\n      cors_headers.location = location.href;\n      res.writeHead(301, 'Please use a direct request', cors_headers);\n      res.end();\n      return;\n    }\n\n    var isRequestedOverHttps = req.connection.encrypted || /^\\s*https/.test(req.headers['x-forwarded-proto']);\n    var proxyBaseUrl = (isRequestedOverHttps ? 'https://' : 'http://') + req.headers.host;\n\n    corsAnywhere.removeHeaders.forEach(function(header) {\n      delete req.headers[header];\n    });\n\n    Object.keys(corsAnywhere.setHeaders).forEach(function(header) {\n      req.headers[header] = corsAnywhere.setHeaders[header];\n    });\n\n    req.corsAnywhereRequestState.location = location;\n    req.corsAnywhereRequestState.proxyBaseUrl = proxyBaseUrl;\n\n    proxyRequest(req, res, proxy);\n  };\n}\n\n// Create server with default and given values\n// Creator still needs to call .listen()\nexports.createServer = function createServer(options) {\n  options = options || {};\n\n  // Default options:\n  var httpProxyOptions = {\n    xfwd: true,            // Append X-Forwarded-* headers\n  };\n  // Allow user to override defaults and add own options\n  if (options.httpProxyOptions) {\n    Object.keys(options.httpProxyOptions).forEach(function(option) {\n      httpProxyOptions[option] = options.httpProxyOptions[option];\n    });\n  }\n\n  var proxy = httpProxy.createServer(httpProxyOptions);\n  var requestHandler = getHandler(options, proxy);\n  var server;\n  if (options.httpsOptions) {\n    server = require('https').createServer(options.httpsOptions, requestHandler);\n  } else {\n    server = require('http').createServer(requestHandler);\n  }\n\n  // When the server fails, just show a 404 instead of Internal server error\n  proxy.on('error', function(err, req, res) {\n    if (res.headersSent) {\n      // This could happen when a protocol error occurs when an error occurs\n      // after the headers have been received (and forwarded). Do not write\n      // the headers because it would generate an error.\n      // Prior to Node 13.x, the stream would have ended.\n      // As of Node 13.x, we must explicitly close it.\n      if (res.writableEnded === false) {\n        res.end();\n      }\n      return;\n    }\n\n    // When the error occurs after setting headers but before writing the response,\n    // then any previously set headers must be removed.\n    var headerNames = res.getHeaderNames ? res.getHeaderNames() : Object.keys(res._headers || {});\n    headerNames.forEach(function(name) {\n      res.removeHeader(name);\n    });\n\n    res.writeHead(404, {'Access-Control-Allow-Origin': '*'});\n    res.end('Not found because of proxy error: ' + err);\n  });\n\n  return server;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}