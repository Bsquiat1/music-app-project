{"ast":null,"code":"'use strict';\n\nvar parseUrl = require('url').parse;\nvar DEFAULT_PORTS = {\n  'ftp:': 21,\n  'gopher:': 70,\n  'http:': 80,\n  'https:': 443,\n  'ws:': 80,\n  'wss:': 443\n};\nvar stringEndsWith = String.prototype.endsWith || function (s) {\n  return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string} url - The URL\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = parseUrl(url);\n  if (!parsedUrl.host || !shouldProxy(parsedUrl)) {\n    return ''; // Don't proxy invalid URLs or URLs that match NO_PROXY.\n  }\n\n  var proto = url.split(':', 1)[0];\n  return getEnv(proto + '_proxy') || getEnv('all_proxy');\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {object} parsedUrl - The result of url.parse\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(parsedUrl) {\n  var NO_PROXY = getEnv('no_proxy').toLowerCase();\n  if (!NO_PROXY) {\n    return true; // Always proxy if NO_PROXY is not set.\n  }\n\n  if (NO_PROXY === '*') {\n    return false; // Never proxy if wildcard is set.\n  }\n\n  var port = parseInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || 0;\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  var hostname = parsedUrl.host.replace(/:\\d*$/, '');\n  return NO_PROXY.split(/[,\\s]/).every(function (proxy) {\n    if (!proxy) {\n      return true; // Skip zero-length hosts.\n    }\n\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true; // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\nexports.getProxyForUrl = getProxyForUrl;","map":{"version":3,"names":["parseUrl","require","parse","DEFAULT_PORTS","stringEndsWith","String","prototype","endsWith","s","length","indexOf","getProxyForUrl","url","parsedUrl","host","shouldProxy","proto","split","getEnv","NO_PROXY","toLowerCase","port","parseInt","protocol","hostname","replace","every","proxy","parsedProxy","match","parsedProxyHostname","parsedProxyPort","test","charAt","slice","call","key","process","env","toUpperCase","exports"],"sources":["/home/bsquiat/Development/code/Phase2/music-app-project/node_modules/proxy-from-env/index.js"],"sourcesContent":["'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  'ftp:': 21,\n  'gopher:': 70,\n  'http:': 80,\n  'https:': 443,\n  'ws:': 80,\n  'wss:': 443,\n};\n\nvar stringEndsWith = String.prototype.endsWith || function(s) {\n  return s.length <= this.length &&\n    this.indexOf(s, this.length - s.length) !== -1;\n};\n\n/**\n * @param {string} url - The URL\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\nfunction getProxyForUrl(url) {\n  var parsedUrl = parseUrl(url);\n  if (!parsedUrl.host || !shouldProxy(parsedUrl)) {\n    return '';  // Don't proxy invalid URLs or URLs that match NO_PROXY.\n  }\n\n  var proto = url.split(':', 1)[0];\n  return getEnv(proto + '_proxy') || getEnv('all_proxy');\n}\n\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {object} parsedUrl - The result of url.parse\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\nfunction shouldProxy(parsedUrl) {\n  var NO_PROXY = getEnv('no_proxy').toLowerCase();\n  if (!NO_PROXY) {\n    return true;  // Always proxy if NO_PROXY is not set.\n  }\n  if (NO_PROXY === '*') {\n    return false;  // Never proxy if wildcard is set.\n  }\n\n  var port = parseInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || 0;\n  // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n  var hostname = parsedUrl.host.replace(/:\\d*$/, '');\n\n  return NO_PROXY.split(/[,\\s]/).every(function(proxy) {\n    if (!proxy) {\n      return true;  // Skip zero-length hosts.\n    }\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true;  // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    }\n    // Stop proxying if the hostname ends with the no_proxy host.\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,KAAK,CAAC,CAACC,KAAK;AAEnC,IAAIC,aAAa,GAAG;EAClB,MAAM,EAAE,EAAE;EACV,SAAS,EAAE,EAAE;EACb,OAAO,EAAE,EAAE;EACX,QAAQ,EAAE,GAAG;EACb,KAAK,EAAE,EAAE;EACT,MAAM,EAAE;AACV,CAAC;AAED,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,IAAI,UAASC,CAAC,EAAE;EAC5D,OAAOA,CAAC,CAACC,MAAM,IAAI,IAAI,CAACA,MAAM,IAC5B,IAAI,CAACC,OAAO,CAACF,CAAC,EAAE,IAAI,CAACC,MAAM,GAAGD,CAAC,CAACC,MAAM,CAAC,KAAK,CAAC,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAACC,GAAG,EAAE;EAC3B,IAAIC,SAAS,GAAGb,QAAQ,CAACY,GAAG,CAAC;EAC7B,IAAI,CAACC,SAAS,CAACC,IAAI,IAAI,CAACC,WAAW,CAACF,SAAS,CAAC,EAAE;IAC9C,OAAO,EAAE,CAAC,CAAE;EACd;;EAEA,IAAIG,KAAK,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,OAAOC,MAAM,CAACF,KAAK,GAAG,QAAQ,CAAC,IAAIE,MAAM,CAAC,WAAW,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,WAAWA,CAACF,SAAS,EAAE;EAC9B,IAAIM,QAAQ,GAAGD,MAAM,CAAC,UAAU,CAAC,CAACE,WAAW,CAAC,CAAC;EAC/C,IAAI,CAACD,QAAQ,EAAE;IACb,OAAO,IAAI,CAAC,CAAE;EAChB;;EACA,IAAIA,QAAQ,KAAK,GAAG,EAAE;IACpB,OAAO,KAAK,CAAC,CAAE;EACjB;;EAEA,IAAIE,IAAI,GAAGC,QAAQ,CAACT,SAAS,CAACQ,IAAI,CAAC,IAAIlB,aAAa,CAACU,SAAS,CAACU,QAAQ,CAAC,IAAI,CAAC;EAC7E;EACA;EACA,IAAIC,QAAQ,GAAGX,SAAS,CAACC,IAAI,CAACW,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EAElD,OAAON,QAAQ,CAACF,KAAK,CAAC,OAAO,CAAC,CAACS,KAAK,CAAC,UAASC,KAAK,EAAE;IACnD,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,IAAI,CAAC,CAAE;IAChB;;IACA,IAAIC,WAAW,GAAGD,KAAK,CAACE,KAAK,CAAC,cAAc,CAAC;IAC7C,IAAIC,mBAAmB,GAAGF,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGD,KAAK;IAC9D,IAAII,eAAe,GAAGH,WAAW,GAAGN,QAAQ,CAACM,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAChE,IAAIG,eAAe,IAAIA,eAAe,KAAKV,IAAI,EAAE;MAC/C,OAAO,IAAI,CAAC,CAAE;IAChB;;IAEA,IAAI,CAAC,OAAO,CAACW,IAAI,CAACF,mBAAmB,CAAC,EAAE;MACtC;MACA,OAAON,QAAQ,KAAKM,mBAAmB;IACzC;IAEA,IAAIA,mBAAmB,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACzC;MACAH,mBAAmB,GAAGA,mBAAmB,CAACI,KAAK,CAAC,CAAC,CAAC;IACpD;IACA;IACA,OAAO,CAAC9B,cAAc,CAAC+B,IAAI,CAACX,QAAQ,EAAEM,mBAAmB,CAAC;EAC5D,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASZ,MAAMA,CAACkB,GAAG,EAAE;EACnB,OAAOC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAChB,WAAW,CAAC,CAAC,CAAC,IAAIiB,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE;AAC/E;AAEAC,OAAO,CAAC7B,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}